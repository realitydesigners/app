---
import '@fontsource/rajdhani/400.css'
import '@fontsource/rajdhani/700.css'
import '@fontsource/orbitron'
import '@fontsource/noto-sans/400.css'
import '@fontsource/noto-sans/500.css'
import '@fontsource/noto-sans/700.css'
import { Image } from 'astro:assets'
import { getSanityImageURL } from '../utils/helpers.js'
import HeadingBlockDark from './blog/HeadingBlockDark.astro'
import HeadingBlockLight from './blog/HeadingBlockLight.astro'
import { SidebarWrapper } from './blog/Sidebar.jsx'
import TeamBlock from './blog/TeamBlock.astro'
import LinkedPosts from './LinkedPosts.astro'
import PortableTextComponent from './portabletext/PortableTextComponent.jsx'

export interface Props {
  post: any
}

const { post } = Astro.props

const h2Headings = Array.isArray(post?.block)
  ? post.block.flatMap((contentBlock: any) =>
      contentBlock?.content
        ? contentBlock.content
            .filter(
              (block: any) => block._type === 'block' && block.style === 'h2',
            )
            .map((block: any) => block.children[0]?.text)
        : [],
    )
  : []
---

{
  post?.block?.map((block: any) => (
    <div>
      {block._type === 'headingBlock' &&
        (block.layout === 'dark' ? (
          <HeadingBlockDark block={block} />
        ) : block.layout === 'light' ? (
          <HeadingBlockLight block={block} />
        ) : null)}
    </div>
  ))
}

<div class="flex absolute p-8 h-full w-1/4">
  <div class="relative w-auto h-full">
    <SidebarWrapper h2Headings={h2Headings} />
  </div>
</div>
{
  post?.block?.map(
    (contentBlock: any, index: number) =>
      contentBlock?.content &&
      (contentBlock.layout === 'dark' ? (
        <PortableTextComponent content={contentBlock.content} template="blog" />
      ) : contentBlock.layout === 'light' ? (
        <div class="w-full h-auto bg-gray-200 pt-8 lg:pt-24">
          <PortableTextComponent
            content={contentBlock.content}
            template="light"
          />
        </div>
      ) : null),
  )
}

{
  post?.block?.map((block: any) => (
    <div>{block._type === 'teamBlock' && <TeamBlock block={block} />}</div>
  ))
}

{
  post?.block?.team && (
    <div class="w-full flex justify-center">
      <div class="flex flex-col w-10/12 lg:w-1/2 mb-12  shadow-lg p-8 border border-gray-500/50 ">
        <div class="flex items-center space-x-4">
          <Image
            src={getSanityImageURL(post?.block?.team.image).url()}
            alt="Team member image"
            width={10}
            height={10}
            format="webp"
            class="w-20 h-20 object-cover rounded-full"
          />
          <div>
            <p class="text-white uppercase font-bold text-lg">
              {post?.block?.teamname}
            </p>
            <p class="text-gray-400 uppercase text-sm">
              {post?.block?.team.role}
            </p>
          </div>
        </div>
        <p class="text-gray-300 mt-4">{post?.team.shortBio}</p>
      </div>
    </div>
  )
}

<LinkedPosts linkedContent={post?.linkedContent} />

<style>
  h1 {
    font-family: 'Noto Sans', sans-serif;
    font-weight: 700;
    animation: fadeIn 2s ease-out;
  }
  h2 {
    font-family: 'Rajdhani', sans-serif;
    font-weight: 700;
  }
  p {
    font-family: 'Noto Sans', sans-serif;
    font-weight: 500;
    animation: fadeIn 1s ease-out;
  }
  .rajhani {
    font-family: 'Rajdhani', sans-serif;
    font-weight: 700;
  }
  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
</style>

<script>
  import TextScrambler from './effects/TextScrambler'

  function scrambleText() {
    const scrambled = document.querySelectorAll('.scramble')

    scrambled.forEach((word) => {
      const scrambler = new TextScrambler(word)
      scrambler.setText(word.textContent)
    })
  }

  document.addEventListener('DOMContentLoaded', scrambleText)
</script>
